class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        """
        Solution iterates through the graph one element at a time,
        and performs a DFS whenever the value is 1. Each time you initiate a
		DFS, increment the counter by 1.

        During the DFS, flip the value of the item within the grid, marking it as "X"
		to represent that it's a 1 that's been explored.  With this, we avoid 
		re-counting any 1's that have been already grouped as part of a
		connected component.
        """
		
        def dfs(grid,i,j):
            if i<0 or i>=len(grid) or j<0 or j>=len(grid[0]):
                return
            elif(grid[i][j]=="0"):
                return
            grid[i][j]="0"
            dfs(grid,i+1,j)
            dfs(grid,i-1,j)
            dfs(grid,i,j+1)
            dfs(grid,i,j-1)
        
        
        ans=0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]=="1":
                    ans+=1
                    dfs(grid,i,j)
        return ans
